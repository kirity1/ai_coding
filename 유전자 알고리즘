#유전자 알고리즘
import random

POPULATION_SIZE = 4
MUTATION_RATE = 0.1
SIZE= 5

#염색체로 클래스를 정의
class Chromosome:
    def __init__(self, genes):
        self.genes = genes
        self.fitness = 0
        if self.genes.__len__() == 0:
            i = 0
            while i < SIZE:
                if random.random() > 0.5:
                    self.genes.append(1)
                else:
                    self.genes.append(0)
                i += 1

def cal_fitness(self):
    self.fitness = 0
    value = 0
    for i in range(SIZE):
        value += self.genes[i] * (2 ** i)
    self.fitness = value
    return self.fitness

def __str__(self):
    return self.genes.__str__()

#염색체와 적합도를 출력
def print_p(population):
    for i in range(POPULATION_SIZE):
        print(population[i].genes, population[i].fitness)
        
#선택
def selec(population):
    max_value = sum([x.fitness for x in population])
    pick = random.uniform(0, max_value)
    current = 0
    
    #룰렛 휠에서 어떤 조각에 속하는지를 알아내는 루프
    for i in range(POPULATION_SIZE):
        current += population[i].fitness
        if current > pick:
            return population[i]

#교차 연산
def crossover(population):
    father = selec(population)
    mother = selec(population)
    index = random.randint(0, SIZE -1)
    child = Chromosome(father.genes[:index] + mother.genes[index:])
    child2 = Chromosome(mother.genes[:index] + father.genes[index:])
    return child, child2

#돌연변이 연산
def mutation(population):
    for i in range(POPULATION_SIZE):
        if random.random() < MUTATION_RATE:
            index = random.randint(0, SIZE -1)
            population[i].genes[index] = 1 - population[i].genes[index]
    return population

#메인 프로그램
population = []
i = 0

while i < POPULATION_SIZE:
    population.append(Chromosome([]))
    i += 1

count = 0
population.sort(key=lambda x: x.cal_fitness(), reverse=True)
print('세대:', count)
print_p(population)
count = 1

while population[0].fitness < 31:
    new_pop = []
    
    #선택과 교차 연산
    for _ in range(POPULATION_SIZE // 2):
        child1, child2 = crossover(population)
        new_pop.append(child1)
        new_pop.append(child2)
        
    #자식 세대가 부모 세대 교체, 깊은 복사
    population = new_pop.copy()
    
    #돌연변이 연산
    population = mutation(population)
    
    #출력을 위한 정렬
    population.sort(key=lambda x: x.cal_fitness(), reverse=True)
    print('세대:', count)
    print_p(population)
    count += 1
    if count > 100:
        break
