game_board = [
        [' ', ' ', ' '],
        [' ', ' ', ' '],
        [' ', ' ', ' ']
    ]

# 비어 있는 칸을 찾아서 리스트로 반환
def empty_cells(board):
    cells = []
    for x, cell in enumerate(board):
        if cell == ' ':
            cells.append(x)
            
        return cells
        
# 비어 있는 칸에 놓을 수 있음
def valid_move(x):
    return x in empty_cells(game_board)
    
# 위치 x에 놓는다.
def move(x, player):
    if valid_move(x):
        game_board[x] = player
        return True
    return False

#게임 보드 그리기
def draw(board):
    for i,cell in enumerate(board):
        if i%3 == 0:
            print('\n--------------')
        print('|', cell, '|', end='')
    print('\n-----------------')
    
#보드 상태 평가
def evaluate(board):
    if check_win(board, 'X'):
        score = 1
    elif check_win(board, 'O'):
        score = -1
    else:
        score = 0
    return score

# 1차원 리스트에서 동일한 문자가 수직선이나 수평선, 대각선으로 나타나면 승리
def check_win(board, player):
    win_conf = [
        [board[0], board[1], board[2]],
        [board[3], board[4], board[5]],
        [board[6], board[7], board[8]],
        [board[0], board[3], board[6]],
        [board[1], board[4], board[7]],
        [board[2], board[5], board[8]],
        [board[0], board[4], board[8]],
        [board[2], board[4], board[6]]
    ]
    return [player, player, player] in win_conf
    
# 미니맥스 알고리즘
def minimax(board, depth, maxPlayer):
    pos = -1
    # 단말 노드이면 보드를 평가하여 위치와 평가값을 반환
    if depth == 0 or len(empty_cells(board)) == 0 or game_over(board):
        return -1, evaluate(board)
        
    if maxPlayer:
        value = -10000
        # 자식 노드를 하나씩 평가하여서 최선의 수를 찾음
        for p in empty_cells(board):
            board[p] = 'X'
            x, score = minimax(board, depth-1, False)
            board[p] = ' '
            if score > value:
                value = score
                pos = p
    else:
        value = +10000
        # 자식 노드를 하나씩 평가하여서 최선의 수를 찾음
        for p in empty_cells(board):
            board[p] = 'O'
            x, score = minimax(board, depth-1, True)
            board[p] = ' '
            if score < value:
                value = score
                pos = p
    return pos, value

player='X'

# 메인 프로그램
while True:
    draw(game_board)
    if len(empty_cells(game_board)) == 0 or game_over(game_board):
        break
    i, v = minimax(game_board, 9, player=='X')
    move(i, player)
    if check_win(game_board, player):
        print(player, '이 이겼습니다!')
        break
    player = 'O' if player == 'X' else 'X'

#알파베타 알고리즘
def empty_cells(board):
    return [i for i in range(len(board)) if board[i] == ' ']

def evaluate(board):
    pass

def game_over(board):
    pass

def minimax(board, depth, maxPlayer, alpha, beta):
    pos = -1
    if depth == 0 or len(empty_cells(board)) == 0 or game_over(board):
        return -1, evaluate(board)

    if maxPlayer:
        value = -10000
        for p in empty_cells(board):
            board[p] = 'X'
            x, score = minimax(board, depth - 1, False, alpha, beta)
            board[p] = ' '
            if score > value:
                value = score
                pos = p
            alpha = max(alpha, value)
            if alpha >= beta:
                break
    else:
        value = +10000
        for p in empty_cells(board):
            board[p] = 'O'
            x, score = minimax(board, depth - 1, True, alpha, beta)
            board[p] = ' '
            if score < value:
                value = score
                pos = p
            beta = min(beta, value)
            if beta <= alpha:
                break

    return pos, value

def main():
    board = [' ' for _ in range(9)]
    depth = 9
    maxPlayer = True
    alpha = -10000
    beta = +10000

    pos, value = minimax(board, depth, maxPlayer, alpha, beta)
    print(f"최적의 위치: {pos}, 평가값: {value}")

if __name__ == "__main__":
    main()
